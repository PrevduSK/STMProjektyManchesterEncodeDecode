@startuml
title menchester read with intreup and timer couter processing
' comment
start

' This set can read 0s signal or 1s signal, but it not read data
' This set read values after Falling or Rising, but not between 

partition "int **main**(void)" {
:HAL_NVIC_EnableIRQ(EXTI0_IRQn);;
}

fork
partition "**While** in function: int **main**(void) " {
while ( endless loop ) is (yes)

	split
	if ( count_edge == 2 ) then (yes)
		:tick_count_prim_half =   (uint32_t) (tick_count_prim/2 );;
	endif
	if (count_bit >= 16) then (yes)
		:HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1); \nHAL_NVIC_DisableIRQ(EXTI0_IRQn); \nrecived_mass[massg_count] = manchester_mass;;
		if (massg_count < MAX_mass_recived) then (yes)
			:massg_count++;;
		endif
		' // HAL_UART_Transmit(&huart1, (uint8_t *) "\r\n", sizeof("\r\n"), 1);
		:count_bit = 0;;
		' //manchester_mass = 0;
	endif

	if ( massg_count == MAX_mass_recived ) then (yes)
		  ' //HAL_SuspendTick();
		  :break;;
		:**While** end;
		break	
		' detach
		' stop
		
	endif
split again
if ( edge_rise_fall_Flag || tim_count_reset_Flag )  then (yes) 
	floating note left: || OR
	  
	  	  if ( tick_count_prim != 0 ) then (yes)
	  	  
	  		  while ( __HAL_TIM_GET_COUNTER(&htim2) <= tick_count_prim_half ) is (yes)
	  		  
	  		  endwhile
				:bit_read_enab= true;;
	  	  
	  	  else (no)
	  	  
	  		  while ( __HAL_TIM_GET_COUNTER(&htim2) <= 200U ) is (yes)
	  		  
	  		  endwhile
				:bit_read_enab= true;;
	  	  endif
	  	  if ( bit_read_enab ) then (yes)
			' // if true read
	  	 ' 	split
			if ( HAL_GPIO_ReadPin(Manchaster_In_GPIO_Port, Manchaster_In_Pin) == GPIO_PIN_RESET) then (yes)
			  
				  :manchester_mass |= 0; \nmanchester_mass <<= 1; \ncount_bit++; \n:last_state_pin = HAL_GPIO_ReadPin(Manchaster_In_GPIO_Port, Manchaster_In_Pin); \nHAL_UART_Transmit(&huart1, (uint8_t *) "0", sizeof("0"), 1);;
				 ' // falling_Flag = false;//!falling_Flag;
			endif
		'	split again
		      	if(HAL_GPIO_ReadPin(Manchaster_In_GPIO_Port, Manchaster_In_Pin) == GPIO_PIN_SET) then (yes)
		      		' // read start val, Low
		    	 	:manchester_mass |= 1; \nmanchester_mass <<= 1; \ncount_bit++; \n:last_state_pin = HAL_GPIO_ReadPin(Manchaster_In_GPIO_Port, Manchaster_In_Pin); \nHAL_UART_Transmit(&huart1, (uint8_t *) "1", sizeof("1"), 1);;
		    		'  //rising_Flag = false;//!rising_Flag;
		      	endif
		'	end split
		      :tim_count_reset_Flag = false; \nbit_read_enab = false; \nedge_rise_fall_Flag = false; \nrising_Flag = false; \nfalling_Flag = false;;

	  	  endif


  	  endif
end split

  

endwhile
-[hidden]->
  detach
}


' -------------------------------- hedlers for interupt -----------------------------
' ---------------------- Callback for TIM_OC---------------------------
fork again
   partition "void **HAL_TIM_OC_DelayElapsedCallback**(TIM_HandleTypeDef * htim)"{
	' start
       if (htim->Instance == TIM2) then (yes)
    	:tim_count_reset_Flag = true;;
    	' //snprintf(uart_mass_buf, sizeof(uart_mass_buf), "Enterd to OC Delay.\r\n");
    	' //HAL_UART_Transmit(&huart1, (uint8_t *) uart_mass_buf, sizeof(uart_mass_buf), 1);
    	endif
	end
   }

' --------------------------------Callback for GPIO_EXTI------------------------------
fork again
   partition "void **HAL_GPIO_EXTI_Rising_Callback**(uint16_t GPIO_Pin)"{
	if (GPIO_Pin == Manchaster_In_Pin) then (yes)
		' //HAL_SuspendTick();
		if (count_edge >= 2) then (2,3,..)
			' //tick_count_zero = HAL_GetTick();  HAL_ResumeTick();
			' :HAL_NVIC_DisableIRQ(EXTI0_IRQn);;
		
		else (0,1)
		note right: when is count_edge												
			' // == 0,1
			if (manchester_IEEE) then (yes)
				:HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);; 
				' //HAL_ResumeTick();
			
			else (no)
				:tick_count_prim = __HAL_TIM_GET_COUNTER(&htim2); \n__HAL_TIM_SET_AUTORELOAD(&htim2, tick_count_prim);;
				' //tick_count_prim = HAL_GetTick();  HAL_ResumeTick();
			endif
			
		endif
		:rising_Flag = true; \nfalling_Flag = false; \nedge_rise_fall_Flag = true; \ncount_edge++;;
	endif
	end
   }


fork again
   partition "void **HAL_GPIO_EXTI_Falling_Callback**(uint16_t GPIO_Pin)"{
	if (GPIO_Pin == Manchaster_In_Pin) then (yes)
		' //HAL_SuspendTick();
		if (count_edge >= 2) then (2,3,..)
			' //tick_count_one = HAL_GetTick();  HAL_ResumeTick();
			' :HAL_NVIC_DisableIRQ(EXTI0_IRQn);;
		
		else (0,1)		
			if (manchester_IEEE) then (yes)
				:tick_count_prim = __HAL_TIM_GET_COUNTER(&htim2); \n__HAL_TIM_SET_AUTORELOAD(&htim2, tick_count_prim);; 
				' // tick_count_prim = HAL_GetTick();  HAL_ResumeTick();
			else (no)
				:HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);; 
				' //HAL_ResumeTick();
			endif
			
		endif
		:rising_Flag = false; \nfalling_Flag = true; \nedge_rise_fall_Flag = true; \ncount_edge++;;
	endif
	end
   }
end fork
' end merge


partition "int **main**(void)" {
:code;
}
stop

@enduml
